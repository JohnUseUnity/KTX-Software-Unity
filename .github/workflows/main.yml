name: build_and_test_ktx_unity

on: [push]

jobs:
  mac:
    runs-on: macOS-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        lfs: true

    - name: configure_mac
      run: cmake . -Bbuild_mac -DCMAKE_BUILD_TYPE=Release
    - name: build_mac
      run: cmake --build build_mac --target ktx_unity
    - name: package_mac
      run: |
        mkdir build_mac/ktx_unity_mac
        mv build_mac/ktx_unity.bundle build_mac/ktx_unity_mac
    - uses: actions/upload-artifact@master
      with:
        name: ktx_unity_mac
        path: build_mac/ktx_unity_mac

    - name: configure_ios
      run: cmake -Bbuild_ios -G Xcode -DCMAKE_SYSTEM_NAME=iOS
    - name: build_ios
      run: cmake --build build_ios --config Release --target ktx_unity
    - name: package_ios
      run: |
        mkdir build_ios/ktx_unity_ios
        cp build_ios/Release-iphoneos/libktx_unity.a build_ios/ktx_unity_ios
        cp build_ios/KTX-Software/Release-iphoneos/libktx_read.a build_ios/ktx_unity_ios
    - uses: actions/upload-artifact@master
      with:
        name: ktx_unity_ios
        path: build_ios/ktx_unity_ios

  windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        lfs: true

    - name: configure_win_64
      run: cmake . -G "Visual Studio 16 2019" -A x64 -Bbuild_win_64
    - name: build_win_64
      run: cmake --build build_win_64 --config Release --target ktx_unity
    # Tests don't work / are not built yet
    # - name: test_win
    #   run: cmake --build build_win_64 --target test
    - uses: actions/upload-artifact@master
      with:
        name: ktx_unity_win_64
        path: build_win_64\Release\ktx_unity.dll


    ## No 32 bit support, since KTX-Software does not provide it
    # - name: configure_win_32
    #   run: cmake . -G "Visual Studio 16 2019" -A Win32 -Bbuild_win_32
    # - name: build_win_32
    #   run: cmake --build build_win_32 --config Release --target ktx_unity
    # - uses: actions/upload-artifact@master
    #   with:
    #     name: ktx_unity_win_32
    #     path: build_win_32\Release\ktx_unity.dll

  linux:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        lfs: true

    - name: configure_linux_64
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install libzstd-dev ninja-build
    - name: configure_linux_64
      run: cmake . -G Ninja -Bbuild_linux_64 -DCMAKE_BUILD_TYPE=Release
    - name: build_linux_64
      run: cmake --build build_linux_64 --target ktx_unity
    - uses: actions/upload-artifact@master
      with:
        name: ktx_unity_linux_64
        path: build_linux_64/libktx_unity.so

    # - name: install_i386_env
    #   run: |
    #     sudo apt-get update
    #     sudo apt install build-essential gcc-multilib g++-multilib
    # - name: configure_linux_32
    #   run: cmake . -G Ninja -Bbuild_linux_32 -DCMAKE_TOOLCHAIN_FILE=cmake/linux_i686.toolchain.cmake -DCMAKE_BUILD_TYPE=Release
    # - name: build_linux_32
    #   run: cmake --build build_linux_32 --target ktx_unity
    # - uses: actions/upload-artifact@master
    #   with:
    #     name: ktx_unity_linux_32
    #     path: build_linux_32/libktx_unity.so

    # - name: install_android_ndk
    #   run: if [ ! -f android-ndk-r21d-linux-x86_64.zip ]; then echo "Installing Android NDK"; wget https://dl.google.com/android/repository/android-ndk-r21d-linux-x86_64.zip; unzip android-ndk-r21d-linux-x86_64.zip; echo "Installed Android NDK"; else echo "Android NDK already installed"; fi

    # - name: configure_android_arm64-v8a
    #   run: cmake -Bbuild_android_arm64-v8a -DANDROID_ABI=arm64-v8a -DCMAKE_BUILD_TYPE=Release -DANDROID_NDK=android-ndk-r21d -DCMAKE_TOOLCHAIN_FILE="android-ndk-r21d/build/cmake/android.toolchain.cmake"
    # - name: build_android_arm64-v8a
    #   run: cmake --build build_android_arm64-v8a --target ktx_unity
    # - uses: actions/upload-artifact@master
    #   with:
    #     name: ktx_unity_android_arm64-v8a
    #     path: build_android_arm64-v8a/libktx_unity.so

    # - name: configure_android_armeabi-v7a
    #   run: cmake -Bbuild_android_armeabi-v7a -DANDROID_ABI=armeabi-v7a -DCMAKE_BUILD_TYPE=Release -DANDROID_NDK=android-ndk-r21d -DCMAKE_TOOLCHAIN_FILE="android-ndk-r21d/build/cmake/android.toolchain.cmake"
    # - name: build_android_armeabi-v7a
    #   run: cmake --build build_android_armeabi-v7a --target ktx_unity
    # - uses: actions/upload-artifact@master
    #   with:
    #     name: ktx_unity_android_armeabi-v7a
    #     path: build_android_armeabi-v7a/libktx_unity.so
